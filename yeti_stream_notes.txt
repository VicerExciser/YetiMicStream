LIBVLC INFO

- plug-in modules:  /usr/lib/arm-linux-gnueabihf/vlc/plugins
- config file:  /home/pi/.config/vlc/vlcrc
- RTSP error:  'no sout stream module matching "rtsp": 23 candidates'
-- ^^ use 'rtp' (Real-time Transport Protocol) instead of 'rstp'

Sample audio stream command:
$  cvlc -vvv [input_stream] --sout '#rtp{dst=[ip_address],port=[port_num],sdp=rtp://[server_address]:8080/test.sdp'

^ input_stream:  could be a file or playlist of files (e.g., '*.wav')
^ ip_address:  of the Pi
^ port_num:  something like 1234
^ server_address:  could be same as ip_address; optionally set the last octet to 255 so that the stream can be received on every computer on the LAN/subnet


_____________________________________________________________________________________________________
YETI MIC INFO

(from `lsusb`):
- Bus 001 Device 006:  ID b58e:9e84 Blue Microphone Yeti Stereo Microphone

(from `/proc/asound/`):
- The Yeti microphone is identified as `/proc/asound/Microphone/`  == `/proc/asound/card2/`
-- (file)  id = Microphone
-- (file)  usbid = b58e:9e84
-- (file)  usbbus = 001/006
-- (file)  usbmixer = USB Mixer: usb_id=0xb58e9e84, ctrlif=0, ctlerr=0
					  Card: Blue Microphones Yeti Stereo Microphone at usb-3f980000.usb-1.1.3, full speed
					  (... more superfluous details included ...)
-- (file)  stream0 = Blue Microphones Yeti Stereo Microphone at usb-3f980000.usb-1.1.3, full speed : USB Audio
					 
					 Playback:
					 	Status: Stop
					 	Interface 1
					 		Altset 1
					 		Format: S16_LE
					 		Channels: 2
					 		Endpoint: 1 OUT (SYNC)
					 		Rates: 44100, 48000

					 Capture:
					 	Status: Stop
					 	Interface 2
					 		Altset 1
					 		Format: S16_LE
					 		Channels: 2
					 		Endpoint: 2 IN (ASYNC)
					 		Rates: 44100, 48000
-- (dir)  pcm0c/
---- (file)  /info = card: 2, device: 0, subdevice: 0, stream: CAPTURE, id: USB Audio, name: USB Audio, ...
---- (dir)   /sub0/
------ (file)    /hw_params = closed
------ (file)    /sw_params = closed
------ (file)    /status = closed


Information displayed from call to `arecord -D plughw:Microphone`:
    Recording WAVE 'stdin' : Signed 16 bit Little Endian, Rate 44100 Hz, Stereo
    Plug PCM: Hardware PCM card 2 'Yeti Stereo Microphone' device 0 subdevice 0
    Its setup is:
      stream       : CAPTURE
      access       : RW_INTERLEAVED
      format       : S16_LE
      subformat    : STD
      channels     : 2
      rate         : 44100
      exact rate   : 44100 (44100/1)
      msbits       : 16
      buffer_size  : 22050
      period_size  : 5513
      period_time  : 125011
      tstamp_mode  : NONE
      tstamp_type  : MONOTONIC
      period_step  : 1
      avail_min    : 5513
      period_event : 0
      start_threshold  : 1
      stop_threshold   : 22050
      silence_threshold: 0
      silence_size : 0
      boundary     : 1445068800
      appl_ptr     : 0
      hw_ptr       : 0


(from `ffmpeg -sources`):
Auto-detected sources for alsa:
  null [Discard all samples (playback) or generate zero samples (capture)]
  default:CARD=Microphone [Default Audio Device]
  sysdefault:CARD=Microphone [Default Audio Device]
  front:CARD=Microphone,DEV=0 [Front speakers]
  surround21:CARD=Microphone,DEV=0 [2.1 Surround output to Front and Subwoofer speakers]
  surround40:CARD=Microphone,DEV=0 [4.0 Surround output to Front and Rear speakers]
  surround41:CARD=Microphone,DEV=0 [4.1 Surround output to Front, Rear and Subwoofer speakers]
  surround50:CARD=Microphone,DEV=0 [5.0 Surround output to Front, Center and Rear speakers]
  surround51:CARD=Microphone,DEV=0 [5.1 Surround output to Front, Center, Rear and Subwoofer speakers]
  surround71:CARD=Microphone,DEV=0 [7.1 Surround output to Front, Center, Side, Rear and Woofer speakers]
  iec958:CARD=Microphone,DEV=0 [IEC958 (S/PDIF) Digital Audio Output]
  dmix:CARD=Microphone,DEV=0 [Direct sample mixing device]
  dsnoop:CARD=Microphone,DEV=0 [Direct sample snooping device]
  hw:CARD=Mi
  crophone,DEV=0 [Direct hardware device without any conversions]
  plughw:CARD=Microphone,DEV=0 [Hardware device with all software conversions]

(from `ffmpeg -sinks`):
Auto-detected sinks for alsa:
  null [Discard all samples (playback) or generate zero samples (capture)]
  default:CARD=b1 [Default Audio Device]
  sysdefault:CARD=b1 [Default Audio Device]
  dmix:CARD=b1,DEV=0 [Direct sample mixing device]
  dsnoop:CARD=b1,DEV=0 [Direct sample snooping device]
  hw:CARD=b1,DEV=0 [Direct hardware device without any conversions]
  plughw:CARD=b1,DEV=0 [Hardware device with all software conversions]
  default:CARD=Headphones [Default Audio Device]
  sysdefault:CARD=Headphones [Default Audio Device]
  dmix:CARD=Headphones,DEV=0 [Direct sample mixing device]
  dsnoop:CARD=Headphones,DEV=0 [Direct sample snooping device]
  hw:CARD=Headphones,DEV=0 [Direct hardware device without any conversions]
  plughw:CARD=Headphones,DEV=0 [Hardware device with all software conversions]
  default:CARD=Microphone [Default Audio Device]
  sysdefault:CARD=Microphone [Default Audio Device]
  front:CARD=Microphone,DEV=0 [Front speakers]
  surround21:CARD=Microphone,DEV=0 [2.1 Surround output to Front and Subwoofer speakers]
  surround40:CARD=Microphone,DEV=0 [4.0 Surround output to Front and Rear speakers]
  surround41:CARD=Microphone,DEV=0 [4.1 Surround output to Front, Rear and Subwoofer speakers]
  surround50:CARD=Microphone,DEV=0 [5.0 Surround output to Front, Center and Rear speakers]
  surround51:CARD=Microphone,DEV=0 [5.1 Surround output to Front, Center, Rear and Subwoofer speakers]
  surround71:CARD=Microphone,DEV=0 [7.1 Surround output to Front, Center, Side, Rear and Woofer speakers]
  iec958:CARD=Microphone,DEV=0 [IEC958 (S/PDIF) Digital Audio Output]
  dmix:CARD=Microphone,DEV=0 [Direct sample mixing device]
  dsnoop:CARD=Microphone,DEV=0 [Direct sample snooping device]
  hw:CARD=Microphone,DEV=0 [Direct hardware device without any conversions]
  plughw:CARD=Microphone,DEV=0 [Hardware device with all software conversions]



To get even more information, run:
$  aplay -l


To get the name of the device programmatically:
	(python)
	import os
	device_name = [l[l.index('[')+1:l.index(']')].strip() for l in os.popen('cat /proc/asound/cards').read().split('\n') if 'Yeti' in l and '[' in l][0]
	(end_python)

  __OR__ (using PyAudio):
  (python)
  import pyaudio
  p = pyaudio.PyAudio()
  mrl = None
  for ii in range(p.get_device_count()):
    dev_name = p.get_device_info_by_index(ii).get('name')
    if "Yeti" in dev_name:
      mrl = dev_name[dev_name.index('(')+1:dev_name.index(')')]
  print(mrl)
  (end_python)

	(bash)
	DEVNAME=$(aplay -l | grep Yeti | cut -d':' -f2 | cut -d'[' -f1 | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')
	(end_bash)


_____________________________________________________________________________________________________
For gstreamer:
$  sudo apt-get install -y gstreamer1.0-tools    #libgstreamer1.0-0   <-- should already be installed

To make a 10 second audio recording at a samplerate of 16000 bit/s via the microphone run:
$  arecord -D plughw:Microphone -r 16000 test.wav -d 10

To play it back:
$  aplay -D plughw:Microphone test.wav

For changing system sound settings (like the default audio input/output devices):
$  amixer or alsamixer

To stream the audio run:
$  gst-launch-1.0 -v alsasrc device=plughw:Microphone ! mulawenc ! rtppcmupay ! udpsink host=clientIp port=5001

^ Replace the clientIp with your computers ip address. Normally I just set the end to 255, so it can be received on every computer on the network, for instance I set mine to: 10.0.0.255.

To receive the audio on your computer:
$  gst-launch-1.0 -v udpsrc port=5001 caps="application/x-rtp" ! queue ! rtppcmudepay ! mulawdec ! audioconvert ! autoaudiosink sync=false

If you experience dropouts you might want to add ‘num-buffers=1000’ just after ‘device=plughw:Microphone’ at the server side, but in my experience it actually works better by not using it.


======================

Options:
- VLC / cvlc    (cvlc is a headless VLC CLI that is identical, minus the GUI)
- gstreamer
- ffmpeg
- omxplayer
-->  To play an audio file w/ omxplayer (thru headphone jack):  $  omxplayer -o local example.wav
-->  To play an audio file w/ omxplayer (thru HDMI):            $  omxplayer -o hdmi example.mp3
-->  To play an audio file w/ omxplayer (thru both outputs):    $  omxplayer -o both example.flac



======================
[Possibly] Required packges:
  Apt:
    gstreamer1.0-tools   *(if using `gst-launch-1.0` for stream/receive)
    libgstreamer1.0-0    *(if not already installed)
    python3-pyaudio      *(if `import pyaudio` raises error for missing __portaudio .so lib)
    python3-vlc          *(if using VLC python bindings && not already installed)
    libportaudio2        *(if not already installed)
    python3-pyaudio      *(if not already installed)



==================================================================
=====  VLC Streaming Notes =======================================
==================================================================
# Start VLC as a multicast RTP server
cvlc -vvv alsa://hw:2,0 \
        --sout='#transcode{acodec=mp3,ab=128,channels=2,samplerate=44100}:rtp{mux=ts,dst=239.255.12.42,port=1234,sdp=sap,name="YetiAudioStream"}'\
        --sout-keep


^^ Note that 239.255.12.42 is a multicast IP address
^^ Ensure the port number is an even number (1234 is default for RTP)
^^ Default sample rate for the Yeti mic is 44.1kHz

^^ Note that this command specifies the use of SAP (Session Announcement Protocol), info below taken from https://wiki.videolan.org/SAP/:
"""
  SAP stands for Session Announcement Protocol.
  It uses multicast to announce streams efficiently on a Local Area Network or on the MBONE: any computer on the network can receive announces from all others without any manual configuration.

  SAP conveys SDP's to describe streams parameters. This can include an RTSP control URL to use for setting up the stream, or a multicast group address to subscribe to. The SDP also includes port numbers and audio/video codecs parameters, and a stream name, etc.

  This technique allows a lot of server to emit streams (often multicasted) and announce them on the network. Clients on the network can then listen for these announces.
  VLC can do this with the "SAP" service discovery plugin.
  You then get a listing of all these streams and can simply tune into the stream of your choice.

  Because SAP uses multicast (as do UPnP and Apple Bonjour), it can normally only operate on a Local area network.
  Unless your computer is connected to the MBONE, you cannot use SAP to advertise your streams onto the Internet, nor can you receive streams from other places.
"""

^^ sap
Use this option if you want VLC to send SAP (Session Announcement Protocol) announces. SAP is a service discovery protocol, that uses a special multicast address to send a list of available streams on a server. This option can only be enabled with the udp output method.


^^ SDP (Session Description Protocol) format options available for VLC streams:
- sdp=sap, to export the SDP using the SAP (Session Announcement Protocol, see RFC 2974).
- sdp=file://<path to the file>, to export the SDP as a local file.
- sdp=http://<local interface IP:port/path>, to make the file available using the integrated HTTP server of VLC.
- sdp=rtsp://<local interface IP:port/path>, to make the SDP file available using the RTSP protocol (see RFC 2326).


^^ More information on VLC CLI options related to RTP streaming:
https://wiki.videolan.org/Documentation:Streaming_HowTo/Advanced_Streaming_Using_the_Command_Line/#rtp

- mux:  Only `ts` is possible for RTP streams
- dst:  The destination UDP address; can be the address of a host or a multicast group; this option must be given unless the `sdp=rtsp://` option is given, in which case the stream will be sent to the host doing the RTSP request


^^ Regarding the `transcode` audio specifications:
- acodec:  This option allows you to specify the codec the audio tracks of the input stream should be transcoded to. 
  --> Available `acodec` values:
      - mpga  (recommended for portability -- `aac` will substitute to this)
      - mp3  (recommended b/c doesn't have to convert audio from 's16l' --> 'f32l', which the next 2 options require)
      - mp4a
      - a52

- ab:  This option allows to set the bitrate of the transcoded audio stream, in kbit/s.

- aenc:  This allows to set the encoder to use to encode the audio stream. Available options are :
  --> ffmpeg:  this is the libavcodec encoding module. It handles a large variety of different codecs.
  --> vorbis:  This module uses the vorbis encoder from the Xiph.org project. Vorbis is a free, open, license-free lossy audio codec.
    ---->  `quality=<quality level>` allows to use VBR (variable bitrate) encoding instead of the default CBR (constant bitrate), and to set the quality level (between 1 and 10, higher is better);
    ---->  `max-bitrate=<bitrate in kbit/s>` allows to set the maximum bitrate, for vbr encoding;
    ---->  `min-bitrate=<bitrate in kbit/s>` allows to set the minimum bitrate, for vbr encoding;
    ---->  `cbr` allows to force cbr encoding.
  --> speex:  This module uses the speex encoder from the Xiph.org project. Speex is a lossy audio codec, best fit for very low bitrates (around 10 kbit/s) and particularly video conferences.

- samplerate:  This option allows to set the sample rate of the transcoded audio stream, in Hz. Reducing the sample rate is a way to lower the bitrate of the resulting audio stream.

- channels:  This option allows to set the number of channels of the resulting audio stream. This is useful for codecs that don't have support for more than 2 channels, or to lower the bitrate of an audio stream.

======================

Receiving a network stream
- To receive an unicast RTP/UDP stream (sent by VLC's stream output), start VLC with:
    % vlc rtp://@:5004
  
  If 5004 is the port to which packets are sent. 1234 is another commonly used port number. 
  If you use the default port (1234), vlc rtp:// will do.

- To receive an multicast UDP/RTP stream (sent by VLC's stream output), start VLC with:
    % vlc rtp://@multicast_address:port

- To receive a SSM (source specific multicast) stream, you can use:
    % vlc rtp://server_address@multicast_address:port
  
  This only works on OSs that support SSM (Windows XP and Linux).

- To receive a HTTP stream, start VLC with:
    % vlc http://www.example.org/your_file.mpg

- To receive a RTSP stream, start VLC with: 
    % vlc rtsp://www.example.org/your_stream

- Receive a stream described by an SDP file:
    % vlc -vvv http://server.example.org/stream.sdp


If wanting to save the stream into file(s) as well, see information here:
https://wiki.videolan.org/Documentation:Streaming_HowTo/Receive_and_Save_a_Stream/


======================
Configurations & Effects:
- Lower bitrate (`ab`) results in poorer quality with little-to-no improvement in latency


======================
VLC: Streaming && Saving Audio Captures all-in-one....      TODO

--> perhaps "duplicate" stream: 1 dst is the RTP address, the other is a loopback
----> add a listener on the loopback address & capture audio from there!

vlc -vvv input_stream --sout
'#transcode{vcodec=mp4v,acodec=mpga,vb=800,ab=128,deinterlace}:
duplicate{dst=display,dst=rtp{mux=ts,dst=239.255.12.42,sdp=sap,name="TestStream"},
dst=rtp{mux=ts,dst=192.168.1.2}}'













